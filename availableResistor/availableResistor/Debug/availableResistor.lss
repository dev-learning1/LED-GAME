
availableResistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a21  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091a  00000000  00000000  00000d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  00001633  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	5e d0       	rcall	.+188    	; 0x156 <main>
  9a:	a8 c0       	rjmp	.+336    	; 0x1ec <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

void ADC_init()
{
	ADMUX |= (1 << REFS0);	//기준전압 5V
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << MUX1 | 1 << MUX0);
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	87 b9       	out	0x07, r24	; 7
	// PF3을 ADC입력핀으로 설정. 단일 입력 방식
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	//분주비 128
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);	//ADC 활성화
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADFR);	//프리러닝 모드
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);	//ADC 시작
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	86 b9       	out	0x06, r24	; 6
  c2:	08 95       	ret

000000c4 <read_ADC>:
}
int read_ADC(void)
{
	while(! (ADCSRA & (1 << ADIF)));
  c4:	34 9b       	sbis	0x06, 4	; 6
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <read_ADC>
	return ADC;
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	95 b1       	in	r25, 0x05	; 5
}
  cc:	08 95       	ret

000000ce <UART1_init>:

void UART1_init(void)
{
	UCSR1A |= (1 << U2X1);				// 2배속 모드
  ce:	eb e9       	ldi	r30, 0x9B	; 155
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
	UBRR1H = 0x00;
  d8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;					// 보율 9600
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);	// 데이터비트수 8비트로 설정
  e2:	ed e9       	ldi	r30, 0x9D	; 157
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	86 60       	ori	r24, 0x06	; 6
  ea:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1)  | (1 << TXEN1);		// 송수신 활성화
  ec:	ea e9       	ldi	r30, 0x9A	; 154
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <UART1_print_string>:
}
void UART1_print_string(char *str)			// 문자열 송신 함수
{
  f8:	bc 01       	movw	r22, r24
	for(int i=0; str[i];i++)			// '\0'문자를 만날 때까지 반복
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	08 c0       	rjmp	.+16     	; 0x110 <UART1_print_string+0x18>
	{
		while( ! (UCSR1A & (1 << UDRE1)));	// 송신 가능 대기
 100:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 104:	95 ff       	sbrs	r25, 5
 106:	fc cf       	rjmp	.-8      	; 0x100 <UART1_print_string+0x8>
		UDR1 = str[i];				// 1바이트 단위로 송신
 108:	40 93 9c 00 	sts	0x009C, r20	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);	// 데이터비트수 8비트로 설정
	UCSR1B |= (1 << RXEN1)  | (1 << TXEN1);		// 송수신 활성화
}
void UART1_print_string(char *str)			// 문자열 송신 함수
{
	for(int i=0; str[i];i++)			// '\0'문자를 만날 때까지 반복
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	fb 01       	movw	r30, r22
 112:	e2 0f       	add	r30, r18
 114:	f3 1f       	adc	r31, r19
 116:	40 81       	ld	r20, Z
 118:	41 11       	cpse	r20, r1
 11a:	f2 cf       	rjmp	.-28     	; 0x100 <UART1_print_string+0x8>
	{
		while( ! (UCSR1A & (1 << UDRE1)));	// 송신 가능 대기
		UDR1 = str[i];				// 1바이트 단위로 송신
	}
}
 11c:	08 95       	ret

0000011e <UART1_print_data>:
void UART1_print_data(int no)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	61 97       	sbiw	r28, 0x11	; 17
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
	int radix = 10;
	char buffer[sizeof(int) * 8 +1];
	itoa(no, buffer, radix);
 132:	4a e0       	ldi	r20, 0x0A	; 10
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	be 01       	movw	r22, r28
 138:	6f 5f       	subi	r22, 0xFF	; 255
 13a:	7f 4f       	sbci	r23, 0xFF	; 255
 13c:	1a d0       	rcall	.+52     	; 0x172 <itoa>
	UART1_print_string(buffer);
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	da df       	rcall	.-76     	; 0xf8 <UART1_print_string>
}
 144:	61 96       	adiw	r28, 0x11	; 17
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <main>:
int main()
{
	int read;
	ADC_init();
 156:	a3 df       	rcall	.-186    	; 0x9e <ADC_init>
	UART1_init();
 158:	ba df       	rcall	.-140    	; 0xce <UART1_init>
	while(1)
	{
		read = read_ADC();
 15a:	b4 df       	rcall	.-152    	; 0xc4 <read_ADC>
 15c:	e0 df       	rcall	.-64     	; 0x11e <UART1_print_data>
		UART1_print_data(read);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	90 e3       	ldi	r25, 0x30	; 48
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0xe>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x18>
 16e:	00 00       	nop
 170:	f4 cf       	rjmp	.-24     	; 0x15a <main+0x4>

00000172 <itoa>:
 172:	45 32       	cpi	r20, 0x25	; 37
 174:	51 05       	cpc	r21, r1
 176:	18 f4       	brcc	.+6      	; 0x17e <itoa+0xc>
 178:	42 30       	cpi	r20, 0x02	; 2
 17a:	08 f0       	brcs	.+2      	; 0x17e <itoa+0xc>
 17c:	04 c0       	rjmp	.+8      	; 0x186 <__itoa_ncheck>
 17e:	fb 01       	movw	r30, r22
 180:	10 82       	st	Z, r1
 182:	cb 01       	movw	r24, r22
 184:	08 95       	ret

00000186 <__itoa_ncheck>:
 186:	bb 27       	eor	r27, r27
 188:	4a 30       	cpi	r20, 0x0A	; 10
 18a:	31 f4       	brne	.+12     	; 0x198 <__itoa_ncheck+0x12>
 18c:	99 23       	and	r25, r25
 18e:	22 f4       	brpl	.+8      	; 0x198 <__itoa_ncheck+0x12>
 190:	bd e2       	ldi	r27, 0x2D	; 45
 192:	90 95       	com	r25
 194:	81 95       	neg	r24
 196:	9f 4f       	sbci	r25, 0xFF	; 255
 198:	01 c0       	rjmp	.+2      	; 0x19c <__utoa_common>

0000019a <__utoa_ncheck>:
 19a:	bb 27       	eor	r27, r27

0000019c <__utoa_common>:
 19c:	fb 01       	movw	r30, r22
 19e:	55 27       	eor	r21, r21
 1a0:	aa 27       	eor	r26, r26
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	aa 1f       	adc	r26, r26
 1a8:	a4 17       	cp	r26, r20
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <__utoa_common+0x14>
 1ac:	a4 1b       	sub	r26, r20
 1ae:	83 95       	inc	r24
 1b0:	50 51       	subi	r21, 0x10	; 16
 1b2:	b9 f7       	brne	.-18     	; 0x1a2 <__utoa_common+0x6>
 1b4:	a0 5d       	subi	r26, 0xD0	; 208
 1b6:	aa 33       	cpi	r26, 0x3A	; 58
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <__utoa_common+0x20>
 1ba:	a9 5d       	subi	r26, 0xD9	; 217
 1bc:	a1 93       	st	Z+, r26
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	79 f7       	brne	.-34     	; 0x1a0 <__utoa_common+0x4>
 1c2:	b1 11       	cpse	r27, r1
 1c4:	b1 93       	st	Z+, r27
 1c6:	11 92       	st	Z+, r1
 1c8:	cb 01       	movw	r24, r22
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <strrev>

000001cc <strrev>:
 1cc:	dc 01       	movw	r26, r24
 1ce:	fc 01       	movw	r30, r24
 1d0:	67 2f       	mov	r22, r23
 1d2:	71 91       	ld	r23, Z+
 1d4:	77 23       	and	r23, r23
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <strrev+0x4>
 1d8:	32 97       	sbiw	r30, 0x02	; 2
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <strrev+0x18>
 1dc:	7c 91       	ld	r23, X
 1de:	6d 93       	st	X+, r22
 1e0:	70 83       	st	Z, r23
 1e2:	62 91       	ld	r22, -Z
 1e4:	ae 17       	cp	r26, r30
 1e6:	bf 07       	cpc	r27, r31
 1e8:	c8 f3       	brcs	.-14     	; 0x1dc <strrev+0x10>
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
