
BUZZER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000194  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800122  00800122  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000968  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000371  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d2  00000000  00000000  00001ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	43 d0       	rcall	.+134    	; 0x14a <main>
  c4:	65 c0       	rjmp	.+202    	; 0x190 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_15>:

//void init_buzzer();
//void comparei_CTC_bit_set();

ISR(TIMER0_COMP_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	OCR0 = cb[tone];
  dc:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <tone>
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e6 5e       	subi	r30, 0xE6	; 230
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	80 81       	ld	r24, Z
  e8:	81 bf       	out	0x31, r24	; 49
	if(init_state==OFF)
  ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
  ee:	81 11       	cpse	r24, r1
  f0:	07 c0       	rjmp	.+14     	; 0x100 <__vector_15+0x38>
	{
		PORTB |= (1<<PB4);
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	80 61       	ori	r24, 0x10	; 16
  f6:	88 bb       	out	0x18, r24	; 24
		init_state = ON;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
  fe:	05 c0       	rjmp	.+10     	; 0x10a <__vector_15+0x42>
	}
	else
	{
		PORTB &= ~(1<<PB4);
 100:	88 b3       	in	r24, 0x18	; 24
 102:	8f 7e       	andi	r24, 0xEF	; 239
 104:	88 bb       	out	0x18, r24	; 24
		init_state = OFF;
 106:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
	}
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0b be       	out	0x3b, r0	; 59
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <init_buzzer>:

void init_buzzer()
{
	DDRA = 0xff;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8a bb       	out	0x1a, r24	; 26
	DDRB = (1<<PB4);
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret

00000128 <comparei_CTC_bit_set>:
}


void comparei_CTC_bit_set()
{
	TCCR0 = 0;
 128:	13 be       	out	0x33, r1	; 51
	TCCR0 |= (1<<WGM01)|(0<<WGM00);       //waveforme generate : CTC ,TOP: OCR0, update: immeiate, Max. 00, 01, (10) 11.
 12a:	83 b7       	in	r24, 0x33	; 51
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (0<<COM01)|(1<<COM00);       // Toggle OC0 on compare match. (non-PWM mode)  00, 01, 10, 11 don't care in                                                              //this code.
 130:	83 b7       	in	r24, 0x33	; 51
 132:	80 61       	ori	r24, 0x10	; 16
 134:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS2)|(0<<CS1)|(0<<CS0);  //  prescale:64, 000:source clock  011:32, 100:64, 101:128, 110:256, 111:1024
 136:	83 b7       	in	r24, 0x33	; 51
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0;
 13c:	17 be       	out	0x37, r1	; 55
	TIMSK |= (1<<OCIE0);                //  interrupt by Compare tcnt0 (0~0xff) and OC0 (user value)valuse.
 13e:	87 b7       	in	r24, 0x37	; 55
 140:	82 60       	ori	r24, 0x02	; 2
 142:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0;
 144:	12 be       	out	0x32, r1	; 50
	sei();                                  //  enable global interrupt.
 146:	78 94       	sei
 148:	08 95       	ret

0000014a <main>:
}

int main(void)
{
	int i=0;
	init_buzzer();
 14a:	e9 df       	rcall	.-46     	; 0x11e <init_buzzer>
	comparei_CTC_bit_set();
 14c:	ed df       	rcall	.-38     	; 0x128 <comparei_CTC_bit_set>
 14e:	80 e0       	ldi	r24, 0x00	; 0
	
}

int main(void)
{
	int i=0;
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	f8 94       	cli
	init_buzzer();
	comparei_CTC_bit_set();
	
	do{
		cli();
 154:	ac 01       	movw	r20, r24
		tone= mz[i++];          //critical section. // for문으로 변경하여 변수인자형을 unsigned char (256)값으로 한정.
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	fc 01       	movw	r30, r24
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 81       	ld	r24, Z
 162:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <tone>
 166:	78 94       	sei
		sei();
 168:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <tone>
		PORTA = tone;      //mz 값 확인용.
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	85 ea       	ldi	r24, 0xA5	; 165
 172:	9e e0       	ldi	r25, 0x0E	; 14
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x2a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x34>
 17e:	00 00       	nop
 180:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <tone>
		_delay_ms(300);
		
	}while(tone!=EOS);
 184:	ca 01       	movw	r24, r20
	init_buzzer();
	comparei_CTC_bit_set();
	
	do{
		cli();
		tone= mz[i++];          //critical section. // for문으로 변경하여 변수인자형을 unsigned char (256)값으로 한정.
 186:	2f 3f       	cpi	r18, 0xFF	; 255
		sei();
		PORTA = tone;      //mz 값 확인용.
		_delay_ms(300);
		
	}while(tone!=EOS);
 188:	21 f7       	brne	.-56     	; 0x152 <main+0x8>
 18a:	80 e0       	ldi	r24, 0x00	; 0

}
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
